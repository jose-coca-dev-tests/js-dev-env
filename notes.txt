EXECUTE EXPRESS SERVER
- execute: > node buildScripts/srcServer.js
SHARE SERVER ONLINE:
- install > npm install localtunnel -g
- execute: > node buildScripts/srcServer.js
- execute as admin: > lt --port 3000 --subdomain josecoca
- open the provided link: https://josecoca.loca.lt/

EXECUTE CONFIGURED SCRIPT
- > npm run start  OR > npm start
- by convention "prestart" scripts are executed before "start" scripts, and so "poststart", and other script names
- execute configured scripts in parallel in only one terminal: > "parallelConfiguredScript": "npm-run-all --parallel script1 script2"

MODULE LOAD
- After load index.js and myLib.js we get on the console: "index.js is loaded!!, from lib: 123456"
- Inspecting the debugger tab we can see the two javascript files just as they exist in ./src/
- After load bundle.html we get on the console: "indexBundler.js is loaded!!, from lib: 123456"
- Inspecting the debugger tab we can see only one javascript file "bundle.js" which bundles the code of both indexBundler.js and myLib.js

EXECUTE LINTING
- execute: > npm run lint, we will get warnings for console.log lines
- eslint rules can be disabled for a whole file with a comment at the top: /* eslint-disable no-console */
- eslint rules can be disabled for specific line with a comment at the end of the line: // eslint-disable-line no-console
- eslint is configured to execute and watch files in command "start", every time the application is executed the eslint will watch files and show results

TESTS
- execute: > npm test  OR > npm run test

HTTP CALLS
- the users mock service can be accessed at http://localhost:3000/users
- the list of users is at http://localhost:3000/bundle.html
- generate mock data at src/api/db.json : > npm run generate-mock-data
- start the json server mock api: > npm run start-mockapi
- open the users list at the mock api: http://localhost:3001/users
- the mock file will be generated every time before start the mock api server
- the mock data will be generated and the server started along with the application start

PRODUCTION BUILD
- process.env.NODE_ENV can be used by babel and other libs
- production build is generated in folder dist
- run development build with mock api activated: > npm start
    - open empty: http://localhost:3000/ 
    - open with mock api: http://localhost:3000/bundle.html/?useMockApi=true
    - open with production api: http://localhost:3000/bundle.html with any other parameters
- run production build with mock api activated: > npm run build
    - open with mock api: http://localhost:3000/bundle.html/?useMockApi=true
    - open with production api: http://localhost:3000/bundle.html with any other parameters
- html generation with bundle script added is working in dev and production builds
- it was needed to downgrade versions in webpack and html-webpack-plugin
- the GZIP compression is not actually working, not in my local test, it must be enabled in the server configuration
- The bundle is splitted in two: main.js(app code) and vendor.js(dependencies), only in production build, it is working
- A hash is added to the bundle names, it is useful for "cache busting", setting a time limit for not updating the bundle in the browser
- The stylesheet is now added to the dist output just as the bundle files, and it contains a hash as well, it is added to bundle.html as:
    <link href="/main.e74025b51d143565c1ce.css" rel="stylesheet">
  Before this it was added to the javascript bundle and it was added to the document by DOM manipulation
- Add conditional code generation in the templates using EmbeddedJS, based on tokens defined in webpack.config.prod.js

SUBJECTS FOR INVESTIGATION
- ESLint
- Webpack
- html-webpack-plugin
- copy-webpack-plugin
- Express
- localtunnel
- NPM scripts
- Babel
- babel-node
- AMD asyncrhonous module definition
- RequireJS
- Mocha
- Chai
- JSDom
- Cheerio
- Fetch
- http (node)
- request (node)
- isomorphic Fetch
- xhr
- SuperAgent
- Axios
- Nock
- api-mock
- JSON server
- JSON Schema   https://json-schema.org/
- JSON schema faker
  - faker.js
  - chance.js
  - randexp.js
- Browsersync
- enable GZIP encoding/compressing
- Lodash
- Error logging with TrackJS
- EmbeddedJS
- Deploy Front-End on Content Delivery Networks (CDN)
- Deploy on GitHub Pages (maybe useful for portfolios, only static files?)
- Deploy Static files on Surge
- Deploy API on Heroku (free option)
